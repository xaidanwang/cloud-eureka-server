<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.dcsoft</groupId>
	<artifactId>cloud-eureka-server</artifactId>
	<version>1.2</version>
	<packaging>jar</packaging>

	<name>cloud-eureka-server</name>
	<description>Demo project for cloud-eureka-server</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Dalston.SR1</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- 打包的名字 -->
		<finalName>cloud-eureka-server</finalName>
		<plugins>
			<!-- spring boot 插件 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- maven docker 插件 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<configuration>
				<!-- <imageName></imageName>该标签指定创建的imges的名字etcd对应docker运行的主机的ip
				5000为私有仓库的服务端口号,/test 为项目名称 /${project.name}1 为镜像 -->
					<imageName>192.168.217.132/library/${project.name}</imageName>
					
					<!--配置私有仓库的认证信息 -->
					<!-- <serverId>对应settings文件中的<id>harbor-hub</id>  -->
					<serverId>harbor-hub</serverId>
					<!--  私有仓库的地址-->
					<registryUrl>http://192.168.217.132</registryUrl>					
					<!-- <imageName>${project.name}1</imageName> -->
					<!-- <dockerDirectory> 指定Dockerfile文件的位置 -->
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<skipDockerBuild>false</skipDockerBuild>
					<!-- 指定给镜像打包的名称 -->
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<!-- <imageTag>latest</imageTag> -->
					</imageTags>
					<!-- 引入创建镜像的其他资源,该配至的作用是经target目录下的jar
					包copy到与dockerFile一个文件夹下面 -->
					<resources>
						<resource>
						<!-- 指定资源所在的文件夹 -->
							<directory>${project.build.directory}</directory>
							<!-- 指定要copy的资源 -->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- <serverId>docker-hub</serverId> <registryUrl>https://index.docker.io/v1/</registryUrl> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.20.1</version>
				<configuration>
					<skipTest>true</skipTest>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
